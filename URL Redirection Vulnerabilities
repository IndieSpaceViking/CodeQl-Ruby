/**
* @name URL redirection
* @kind path-problem
* @id rb/url-redirection
*/
import ruby
import codeql.ruby.frameworks.ActionController
import codeql.ruby.Concepts
import codeql.ruby.dataflow.RemoteFlowSources
import codeql.ruby.TaintTracking
import DataFlow::PathGraph

class GetHandlerMethod extends Ast::MethodBase {
  GetHandlerMethod() {
    this.(ActionControllerActionMethod).getARoute().getHttpMethod() = "get"
    or
    not exists(this.(ActionControllerActionMethod).getARoute()) and
    this = any(ActionControllerControllerClass c).getAMethod() and
    not this.getName().regexpMatch(".*(create|update|destroy).*")
  }
}

predicate isRedirect(DataFlow::Node redirectLocation, GetHandlerMethod method) {
  exists(Http::Server::HttpRedirectResponse redirectCall |
    redirectCall.getRedirectLocation() = redirectLocation and
    redirectCall.asExpr().getExpr().getEnclosingMethod() = method
  )
}

class UrlRedirectionConfig extends TaintTracking::Configuration {
  UrlRedirectionConfig() { this = "UrlRedirectionConfig" }

  override predicate isSource(DataFlow::Node source) {
    source instanceof RemoteFlowSource
  }
  override predicate isSink(DataFlow::Node sink) {
    isRedirect(sink, _)
  }
}

from UrlRedirectionConfig config, DataFlow::PathNode source, DataFlow::PathNode sink
where config.hasFlowPath(source, sink)
select sink, source, sink, "Potential URL redirection"
